{"version":3,"file":"js/394.9edcdfc3.js","mappings":"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","sources":["webpack://project/../../../packages/components/config-provider/src/constants.ts","webpack://project/../../../packages/components/config-provider/src/hooks/use-global-config.ts","webpack://project/../../../packages/hooks/use-same-target/index.ts","webpack://project/../../../packages/components/overlay/src/overlay.ts","webpack://project/../../../packages/components/overlay/index.ts","webpack://project/../../../packages/components/dialog/src/constants.ts","webpack://project/../../../packages/components/dialog/src/dialog-content.ts","webpack://project/../../../packages/utils/vue/refs.ts","webpack://project/../../../packages/hooks/use-draggable/index.ts","webpack://project/../../../packages/components/dialog/src/dialog-content.vue","webpack://project/../../../packages/components/dialog/src/dialog.ts","webpack://project/../../../packages/hooks/use-lockscreen/index.ts","webpack://project/../../../packages/components/dialog/src/use-dialog.ts","webpack://project/../../../packages/components/dialog/src/dialog.vue","webpack://project/../../../packages/components/dialog/index.ts"],"sourcesContent":["import type { ConfigProviderProps } from './config-provider-props'\nimport type { InjectionKey, Ref } from 'vue'\n\nexport type ConfigProviderContext = Partial<ConfigProviderProps>\n\nexport const configProviderContextKey: InjectionKey<\n  Ref<ConfigProviderContext>\n> = Symbol()\n","import { computed, getCurrentInstance, inject, provide, ref, unref } from 'vue'\nimport { debugWarn, keysOf } from '@element-plus/utils'\nimport {\n  SIZE_INJECTION_KEY,\n  defaultInitialZIndex,\n  defaultNamespace,\n  localeContextKey,\n  namespaceContextKey,\n  useLocale,\n  useNamespace,\n  useZIndex,\n  zIndexContextKey,\n} from '@element-plus/hooks'\nimport { configProviderContextKey } from '../constants'\n\nimport type { MaybeRef } from '@vueuse/core'\nimport type { App, Ref } from 'vue'\nimport type { ConfigProviderContext } from '../constants'\n\n// this is meant to fix global methods like `ElMessage(opts)`, this way we can inject current locale\n// into the component as default injection value.\n// refer to: https://github.com/element-plus/element-plus/issues/2610#issuecomment-887965266\nconst globalConfig = ref<ConfigProviderContext>()\n\nexport function useGlobalConfig<\n  K extends keyof ConfigProviderContext,\n  D extends ConfigProviderContext[K]\n>(\n  key: K,\n  defaultValue?: D\n): Ref<Exclude<ConfigProviderContext[K], undefined> | D>\nexport function useGlobalConfig(): Ref<ConfigProviderContext>\nexport function useGlobalConfig(\n  key?: keyof ConfigProviderContext,\n  defaultValue = undefined\n) {\n  const config = getCurrentInstance()\n    ? inject(configProviderContextKey, globalConfig)\n    : globalConfig\n  if (key) {\n    return computed(() => config.value?.[key] ?? defaultValue)\n  } else {\n    return config\n  }\n}\n\n// for components like `ElMessage` `ElNotification` `ElMessageBox`.\nexport function useGlobalComponentSettings(\n  block: string,\n  sizeFallback?: MaybeRef<ConfigProviderContext['size']>\n) {\n  const config = useGlobalConfig()\n\n  const ns = useNamespace(\n    block,\n    computed(() => config.value?.namespace || defaultNamespace)\n  )\n\n  const locale = useLocale(computed(() => config.value?.locale))\n  const zIndex = useZIndex(\n    computed(() => config.value?.zIndex || defaultInitialZIndex)\n  )\n  const size = computed(() => unref(sizeFallback) || config.value?.size || '')\n  provideGlobalConfig(computed(() => unref(config) || {}))\n\n  return {\n    ns,\n    locale,\n    zIndex,\n    size,\n  }\n}\n\nexport const provideGlobalConfig = (\n  config: MaybeRef<ConfigProviderContext>,\n  app?: App,\n  global = false\n) => {\n  const inSetup = !!getCurrentInstance()\n  const oldConfig = inSetup ? useGlobalConfig() : undefined\n\n  const provideFn = app?.provide ?? (inSetup ? provide : undefined)\n  if (!provideFn) {\n    debugWarn(\n      'provideGlobalConfig',\n      'provideGlobalConfig() can only be used inside setup().'\n    )\n    return\n  }\n\n  const context = computed(() => {\n    const cfg = unref(config)\n    if (!oldConfig?.value) return cfg\n    return mergeConfig(oldConfig.value, cfg)\n  })\n  provideFn(configProviderContextKey, context)\n  provideFn(\n    localeContextKey,\n    computed(() => context.value.locale)\n  )\n  provideFn(\n    namespaceContextKey,\n    computed(() => context.value.namespace)\n  )\n  provideFn(\n    zIndexContextKey,\n    computed(() => context.value.zIndex)\n  )\n\n  provideFn(SIZE_INJECTION_KEY, {\n    size: computed(() => context.value.size || ''),\n  })\n\n  if (global || !globalConfig.value) {\n    globalConfig.value = context.value\n  }\n  return context\n}\n\nconst mergeConfig = (\n  a: ConfigProviderContext,\n  b: ConfigProviderContext\n): ConfigProviderContext => {\n  const keys = [...new Set([...keysOf(a), ...keysOf(b)])]\n  const obj: Record<string, any> = {}\n  for (const key of keys) {\n    obj[key] = b[key] ?? a[key]\n  }\n  return obj\n}\n","import { NOOP } from '@vue/shared'\n\nexport const useSameTarget = (handleClick?: (e: MouseEvent) => void) => {\n  if (!handleClick) {\n    return { onClick: NOOP, onMousedown: NOOP, onMouseup: NOOP }\n  }\n\n  let mousedownTarget = false\n  let mouseupTarget = false\n  // refer to this https://javascript.info/mouse-events-basics\n  // events fired in the order: mousedown -> mouseup -> click\n  // we need to set the mousedown handle to false after click fired.\n  const onClick = (e: MouseEvent) => {\n    // if and only if\n    if (mousedownTarget && mouseupTarget) {\n      handleClick(e)\n    }\n    mousedownTarget = mouseupTarget = false\n  }\n\n  const onMousedown = (e: MouseEvent) => {\n    // marking current mousedown target.\n    mousedownTarget = e.target === e.currentTarget\n  }\n  const onMouseup = (e: MouseEvent) => {\n    // marking current mouseup target.\n    mouseupTarget = e.target === e.currentTarget\n  }\n\n  return { onClick, onMousedown, onMouseup }\n}\n","import { createVNode, defineComponent, h, renderSlot } from 'vue'\nimport { PatchFlags, buildProps, definePropType } from '@element-plus/utils'\nimport { useNamespace, useSameTarget } from '@element-plus/hooks'\n\nimport type { CSSProperties, ExtractPropTypes } from 'vue'\nimport type { ZIndexProperty } from 'csstype'\n\nexport const overlayProps = buildProps({\n  mask: {\n    type: Boolean,\n    default: true,\n  },\n  customMaskEvent: {\n    type: Boolean,\n    default: false,\n  },\n  overlayClass: {\n    type: definePropType<string | string[] | Record<string, boolean>>([\n      String,\n      Array,\n      Object,\n    ]),\n  },\n  zIndex: {\n    type: definePropType<ZIndexProperty>([String, Number]),\n  },\n} as const)\nexport type OverlayProps = ExtractPropTypes<typeof overlayProps>\n\nexport const overlayEmits = {\n  click: (evt: MouseEvent) => evt instanceof MouseEvent,\n}\nexport type OverlayEmits = typeof overlayEmits\n\nconst BLOCK = 'overlay'\n\nexport default defineComponent({\n  name: 'ElOverlay',\n\n  props: overlayProps,\n  emits: overlayEmits,\n\n  setup(props, { slots, emit }) {\n    // No reactivity on this prop because when its rendering with a global\n    // component, this will be a constant flag.\n    const ns = useNamespace(BLOCK)\n\n    const onMaskClick = (e: MouseEvent) => {\n      emit('click', e)\n    }\n\n    const { onClick, onMousedown, onMouseup } = useSameTarget(\n      props.customMaskEvent ? undefined : onMaskClick\n    )\n\n    // init here\n    return () => {\n      // when the vnode meets the same structure but with different change trigger\n      // it will not automatically update, thus we simply use h function to manage updating\n      return props.mask\n        ? createVNode(\n            'div',\n            {\n              class: [ns.b(), props.overlayClass],\n              style: {\n                zIndex: props.zIndex,\n              },\n              onClick,\n              onMousedown,\n              onMouseup,\n            },\n            [renderSlot(slots, 'default')],\n            PatchFlags.STYLE | PatchFlags.CLASS | PatchFlags.PROPS,\n            ['onClick', 'onMouseup', 'onMousedown']\n          )\n        : h(\n            'div',\n            {\n              class: props.overlayClass,\n              style: {\n                zIndex: props.zIndex,\n                position: 'fixed',\n                top: '0px',\n                right: '0px',\n                bottom: '0px',\n                left: '0px',\n              } as CSSProperties,\n            },\n            [renderSlot(slots, 'default')]\n          )\n    }\n  },\n})\n","import Overlay from './src/overlay'\n\nexport const ElOverlay = Overlay\nexport default ElOverlay\n\nexport * from './src/overlay'\n","import type { CSSProperties, ComputedRef, InjectionKey, Ref } from 'vue'\nimport type { UseNamespaceReturn } from '@element-plus/hooks'\n\nexport type DialogContext = {\n  dialogRef: Ref<HTMLElement | undefined>\n  headerRef: Ref<HTMLElement | undefined>\n  bodyId: Ref<string>\n  ns: UseNamespaceReturn\n  rendered: Ref<boolean>\n  style: ComputedRef<CSSProperties>\n}\n\nexport const dialogInjectionKey: InjectionKey<DialogContext> =\n  Symbol('dialogInjectionKey')\n","import { buildProps, iconPropType } from '@element-plus/utils'\n\nexport const dialogContentProps = buildProps({\n  center: {\n    type: Boolean,\n    default: false,\n  },\n  alignCenter: {\n    type: Boolean,\n    default: false,\n  },\n  closeIcon: {\n    type: iconPropType,\n  },\n  customClass: {\n    type: String,\n    default: '',\n  },\n  draggable: {\n    type: Boolean,\n    default: false,\n  },\n  fullscreen: {\n    type: Boolean,\n    default: false,\n  },\n  showClose: {\n    type: Boolean,\n    default: true,\n  },\n  title: {\n    type: String,\n    default: '',\n  },\n} as const)\n\nexport const dialogContentEmits = {\n  close: () => true,\n}\n","import { isFunction } from '../types'\n\nimport type { ComponentPublicInstance, Ref } from 'vue'\n\nexport type RefSetter = (\n  el: Element | ComponentPublicInstance | undefined\n) => void\n\nexport const composeRefs = (\n  ...refs: (Ref<HTMLElement | undefined> | RefSetter)[]\n) => {\n  return (el: Element | ComponentPublicInstance | null) => {\n    refs.forEach((ref) => {\n      if (isFunction(ref)) {\n        ref(el as Element | ComponentPublicInstance)\n      } else {\n        ref.value = el as HTMLElement | undefined\n      }\n    })\n  }\n}\n","import { onBeforeUnmount, onMounted, watchEffect } from 'vue'\nimport { addUnit } from '@element-plus/utils'\nimport type { ComputedRef, Ref } from 'vue'\n\nexport const useDraggable = (\n  targetRef: Ref<HTMLElement | undefined>,\n  dragRef: Ref<HTMLElement | undefined>,\n  draggable: ComputedRef<boolean>\n) => {\n  let transform = {\n    offsetX: 0,\n    offsetY: 0,\n  }\n\n  const onMousedown = (e: MouseEvent) => {\n    const downX = e.clientX\n    const downY = e.clientY\n    const { offsetX, offsetY } = transform\n\n    const targetRect = targetRef.value!.getBoundingClientRect()\n    const targetLeft = targetRect.left\n    const targetTop = targetRect.top\n    const targetWidth = targetRect.width\n    const targetHeight = targetRect.height\n\n    const clientWidth = document.documentElement.clientWidth\n    const clientHeight = document.documentElement.clientHeight\n\n    const minLeft = -targetLeft + offsetX\n    const minTop = -targetTop + offsetY\n    const maxLeft = clientWidth - targetLeft - targetWidth + offsetX\n    const maxTop = clientHeight - targetTop - targetHeight + offsetY\n\n    const onMousemove = (e: MouseEvent) => {\n      const moveX = Math.min(\n        Math.max(offsetX + e.clientX - downX, minLeft),\n        maxLeft\n      )\n      const moveY = Math.min(\n        Math.max(offsetY + e.clientY - downY, minTop),\n        maxTop\n      )\n\n      transform = {\n        offsetX: moveX,\n        offsetY: moveY,\n      }\n      targetRef.value!.style.transform = `translate(${addUnit(\n        moveX\n      )}, ${addUnit(moveY)})`\n    }\n\n    const onMouseup = () => {\n      document.removeEventListener('mousemove', onMousemove)\n      document.removeEventListener('mouseup', onMouseup)\n    }\n\n    document.addEventListener('mousemove', onMousemove)\n    document.addEventListener('mouseup', onMouseup)\n  }\n\n  const onDraggable = () => {\n    if (dragRef.value && targetRef.value) {\n      dragRef.value.addEventListener('mousedown', onMousedown)\n    }\n  }\n\n  const offDraggable = () => {\n    if (dragRef.value && targetRef.value) {\n      dragRef.value.removeEventListener('mousedown', onMousedown)\n    }\n  }\n\n  onMounted(() => {\n    watchEffect(() => {\n      if (draggable.value) {\n        onDraggable()\n      } else {\n        offDraggable()\n      }\n    })\n  })\n\n  onBeforeUnmount(() => {\n    offDraggable()\n  })\n}\n","<template>\n  <div\n    :ref=\"composedDialogRef\"\n    :class=\"[\n      ns.b(),\n      ns.is('fullscreen', fullscreen),\n      ns.is('draggable', draggable),\n      ns.is('align-center', alignCenter),\n      { [ns.m('center')]: center },\n      customClass,\n    ]\"\n    :style=\"style\"\n    tabindex=\"-1\"\n  >\n    <header ref=\"headerRef\" :class=\"ns.e('header')\">\n      <slot name=\"header\">\n        <span role=\"heading\" :class=\"ns.e('title')\">\n          {{ title }}\n        </span>\n      </slot>\n      <button\n        v-if=\"showClose\"\n        :aria-label=\"t('el.dialog.close')\"\n        :class=\"ns.e('headerbtn')\"\n        type=\"button\"\n        @click=\"$emit('close')\"\n      >\n        <el-icon :class=\"ns.e('close')\">\n          <component :is=\"closeIcon || Close\" />\n        </el-icon>\n      </button>\n    </header>\n    <div :id=\"bodyId\" :class=\"ns.e('body')\">\n      <slot />\n    </div>\n    <footer v-if=\"$slots.footer\" :class=\"ns.e('footer')\">\n      <slot name=\"footer\" />\n    </footer>\n  </div>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, inject } from 'vue'\nimport { ElIcon } from '@element-plus/components/icon'\nimport { FOCUS_TRAP_INJECTION_KEY } from '@element-plus/components/focus-trap'\nimport { useDraggable, useLocale } from '@element-plus/hooks'\nimport { CloseComponents, composeRefs } from '@element-plus/utils'\nimport { dialogInjectionKey } from './constants'\nimport { dialogContentEmits, dialogContentProps } from './dialog-content'\n\nconst { t } = useLocale()\nconst { Close } = CloseComponents\n\ndefineOptions({ name: 'ElDialogContent' })\nconst props = defineProps(dialogContentProps)\ndefineEmits(dialogContentEmits)\n\nconst { dialogRef, headerRef, bodyId, ns, style } = inject(dialogInjectionKey)!\nconst { focusTrapRef } = inject(FOCUS_TRAP_INJECTION_KEY)!\n\nconst composedDialogRef = composeRefs(focusTrapRef, dialogRef)\n\nconst draggable = computed(() => props.draggable)\nuseDraggable(dialogRef, headerRef, draggable)\n</script>\n","import { buildProps, definePropType, isBoolean } from '@element-plus/utils'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { dialogContentProps } from './dialog-content'\n\nimport type { ExtractPropTypes } from 'vue'\n\ntype DoneFn = (cancel?: boolean) => void\nexport type DialogBeforeCloseFn = (done: DoneFn) => void\n\nexport const dialogProps = buildProps({\n  ...dialogContentProps,\n  appendToBody: {\n    type: Boolean,\n    default: false,\n  },\n  beforeClose: {\n    type: definePropType<DialogBeforeCloseFn>(Function),\n  },\n  destroyOnClose: {\n    type: Boolean,\n    default: false,\n  },\n  closeOnClickModal: {\n    type: Boolean,\n    default: true,\n  },\n  closeOnPressEscape: {\n    type: Boolean,\n    default: true,\n  },\n  lockScroll: {\n    type: Boolean,\n    default: true,\n  },\n  modal: {\n    type: Boolean,\n    default: true,\n  },\n  openDelay: {\n    type: Number,\n    default: 0,\n  },\n  closeDelay: {\n    type: Number,\n    default: 0,\n  },\n  top: {\n    type: String,\n  },\n  modelValue: {\n    type: Boolean,\n    default: false,\n  },\n  modalClass: String,\n  width: {\n    type: [String, Number],\n  },\n  zIndex: {\n    type: Number,\n  },\n  trapFocus: {\n    type: Boolean,\n    default: false,\n  },\n} as const)\n\nexport type DialogProps = ExtractPropTypes<typeof dialogProps>\n\nexport const dialogEmits = {\n  open: () => true,\n  opened: () => true,\n  close: () => true,\n  closed: () => true,\n  [UPDATE_MODEL_EVENT]: (value: boolean) => isBoolean(value),\n  openAutoFocus: () => true,\n  closeAutoFocus: () => true,\n}\nexport type DialogEmits = typeof dialogEmits\n","import { isRef, onScopeDispose, watch } from 'vue'\nimport { computed } from '@vue/reactivity'\nimport { isClient } from '@vueuse/core'\nimport {\n  addClass,\n  getScrollBarWidth,\n  getStyle,\n  hasClass,\n  removeClass,\n  throwError,\n} from '@element-plus/utils'\nimport { useNamespace } from '../use-namespace'\n\nimport type { Ref } from 'vue'\nimport type { UseNamespaceReturn } from '../use-namespace'\n\nexport type UseLockScreenOptions = {\n  ns?: UseNamespaceReturn\n  // shouldLock?: MaybeRef<boolean>\n}\n\n/**\n * Hook that monitoring the ref value to lock or unlock the screen.\n * When the trigger became true, it assumes modal is now opened and vice versa.\n * @param trigger {Ref<boolean>}\n */\nexport const useLockscreen = (\n  trigger: Ref<boolean>,\n  options: UseLockScreenOptions = {}\n) => {\n  if (!isRef(trigger)) {\n    throwError(\n      '[useLockscreen]',\n      'You need to pass a ref param to this function'\n    )\n  }\n\n  const ns = options.ns || useNamespace('popup')\n\n  const hiddenCls = computed(() => ns.bm('parent', 'hidden'))\n\n  if (!isClient || hasClass(document.body, hiddenCls.value)) {\n    return\n  }\n\n  let scrollBarWidth = 0\n  let withoutHiddenClass = false\n  let bodyWidth = '0'\n\n  const cleanup = () => {\n    setTimeout(() => {\n      removeClass(document?.body, hiddenCls.value)\n      if (withoutHiddenClass && document) {\n        document.body.style.width = bodyWidth\n      }\n    }, 200)\n  }\n  watch(trigger, (val) => {\n    if (!val) {\n      cleanup()\n      return\n    }\n\n    withoutHiddenClass = !hasClass(document.body, hiddenCls.value)\n    if (withoutHiddenClass) {\n      bodyWidth = document.body.style.width\n    }\n    scrollBarWidth = getScrollBarWidth(ns.namespace.value)\n    const bodyHasOverflow =\n      document.documentElement.clientHeight < document.body.scrollHeight\n    const bodyOverflowY = getStyle(document.body, 'overflowY')\n    if (\n      scrollBarWidth > 0 &&\n      (bodyHasOverflow || bodyOverflowY === 'scroll') &&\n      withoutHiddenClass\n    ) {\n      document.body.style.width = `calc(100% - ${scrollBarWidth}px)`\n    }\n    addClass(document.body, hiddenCls.value)\n  })\n  onScopeDispose(() => cleanup())\n}\n","import {\n  computed,\n  getCurrentInstance,\n  nextTick,\n  onMounted,\n  ref,\n  watch,\n} from 'vue'\nimport { isClient, useTimeoutFn } from '@vueuse/core'\n\nimport {\n  defaultNamespace,\n  useId,\n  useLockscreen,\n  useZIndex,\n} from '@element-plus/hooks'\nimport { UPDATE_MODEL_EVENT } from '@element-plus/constants'\nimport { addUnit } from '@element-plus/utils'\nimport { useGlobalConfig } from '@element-plus/components/config-provider'\n\nimport type { CSSProperties, Ref, SetupContext } from 'vue'\nimport type { DialogEmits, DialogProps } from './dialog'\n\nexport const useDialog = (\n  props: DialogProps,\n  targetRef: Ref<HTMLElement | undefined>\n) => {\n  const instance = getCurrentInstance()!\n  const emit = instance.emit as SetupContext<DialogEmits>['emit']\n  const { nextZIndex } = useZIndex()\n\n  let lastPosition = ''\n  const titleId = useId()\n  const bodyId = useId()\n  const visible = ref(false)\n  const closed = ref(false)\n  const rendered = ref(false) // when desctroyOnClose is true, we initialize it as false vise versa\n  const zIndex = ref(props.zIndex || nextZIndex())\n\n  let openTimer: (() => void) | undefined = undefined\n  let closeTimer: (() => void) | undefined = undefined\n\n  const namespace = useGlobalConfig('namespace', defaultNamespace)\n\n  const style = computed<CSSProperties>(() => {\n    const style: CSSProperties = {}\n    const varPrefix = `--${namespace.value}-dialog` as const\n    if (!props.fullscreen) {\n      if (props.top) {\n        style[`${varPrefix}-margin-top`] = props.top\n      }\n      if (props.width) {\n        style[`${varPrefix}-width`] = addUnit(props.width)\n      }\n    }\n    return style\n  })\n\n  const overlayDialogStyle = computed<CSSProperties>(() => {\n    if (props.alignCenter) {\n      return { display: 'flex' }\n    }\n    return {}\n  })\n\n  function afterEnter() {\n    emit('opened')\n  }\n\n  function afterLeave() {\n    emit('closed')\n    emit(UPDATE_MODEL_EVENT, false)\n    if (props.destroyOnClose) {\n      rendered.value = false\n    }\n  }\n\n  function beforeLeave() {\n    emit('close')\n  }\n\n  function open() {\n    closeTimer?.()\n    openTimer?.()\n\n    if (props.openDelay && props.openDelay > 0) {\n      ;({ stop: openTimer } = useTimeoutFn(() => doOpen(), props.openDelay))\n    } else {\n      doOpen()\n    }\n  }\n\n  function close() {\n    openTimer?.()\n    closeTimer?.()\n\n    if (props.closeDelay && props.closeDelay > 0) {\n      ;({ stop: closeTimer } = useTimeoutFn(() => doClose(), props.closeDelay))\n    } else {\n      doClose()\n    }\n  }\n\n  function handleClose() {\n    function hide(shouldCancel?: boolean) {\n      if (shouldCancel) return\n      closed.value = true\n      visible.value = false\n    }\n\n    if (props.beforeClose) {\n      props.beforeClose(hide)\n    } else {\n      close()\n    }\n  }\n\n  function onModalClick() {\n    if (props.closeOnClickModal) {\n      handleClose()\n    }\n  }\n\n  function doOpen() {\n    if (!isClient) return\n    visible.value = true\n  }\n\n  function doClose() {\n    visible.value = false\n  }\n\n  function onOpenAutoFocus() {\n    emit('openAutoFocus')\n  }\n\n  function onCloseAutoFocus() {\n    emit('closeAutoFocus')\n  }\n\n  function onFocusoutPrevented(event: CustomEvent) {\n    if (event.detail?.focusReason === 'pointer') {\n      event.preventDefault()\n    }\n  }\n\n  if (props.lockScroll) {\n    useLockscreen(visible)\n  }\n\n  function onCloseRequested() {\n    if (props.closeOnPressEscape) {\n      handleClose()\n    }\n  }\n\n  watch(\n    () => props.modelValue,\n    (val) => {\n      if (val) {\n        closed.value = false\n        open()\n        rendered.value = true // enables lazy rendering\n        zIndex.value = props.zIndex ? zIndex.value++ : nextZIndex()\n        // this.$el.addEventListener('scroll', this.updatePopper)\n        nextTick(() => {\n          emit('open')\n          if (targetRef.value) {\n            targetRef.value.scrollTop = 0\n          }\n        })\n      } else {\n        // this.$el.removeEventListener('scroll', this.updatePopper\n        if (visible.value) {\n          close()\n        }\n      }\n    }\n  )\n\n  watch(\n    () => props.fullscreen,\n    (val) => {\n      if (!targetRef.value) return\n      if (val) {\n        lastPosition = targetRef.value.style.transform\n        targetRef.value.style.transform = ''\n      } else {\n        targetRef.value.style.transform = lastPosition\n      }\n    }\n  )\n\n  onMounted(() => {\n    if (props.modelValue) {\n      visible.value = true\n      rendered.value = true // enables lazy rendering\n      open()\n    }\n  })\n\n  return {\n    afterEnter,\n    afterLeave,\n    beforeLeave,\n    handleClose,\n    onModalClick,\n    close,\n    doClose,\n    onOpenAutoFocus,\n    onCloseAutoFocus,\n    onCloseRequested,\n    onFocusoutPrevented,\n    titleId,\n    bodyId,\n    closed,\n    style,\n    overlayDialogStyle,\n    rendered,\n    visible,\n    zIndex,\n  }\n}\n","<template>\n  <teleport to=\"body\" :disabled=\"!appendToBody\">\n    <transition\n      name=\"dialog-fade\"\n      @after-enter=\"afterEnter\"\n      @after-leave=\"afterLeave\"\n      @before-leave=\"beforeLeave\"\n    >\n      <el-overlay\n        v-show=\"visible\"\n        custom-mask-event\n        :mask=\"modal\"\n        :overlay-class=\"modalClass\"\n        :z-index=\"zIndex\"\n      >\n        <div\n          role=\"dialog\"\n          aria-modal=\"true\"\n          :aria-label=\"title || undefined\"\n          :aria-labelledby=\"!title ? titleId : undefined\"\n          :aria-describedby=\"bodyId\"\n          :class=\"`${ns.namespace.value}-overlay-dialog`\"\n          :style=\"overlayDialogStyle\"\n          @click=\"overlayEvent.onClick\"\n          @mousedown=\"overlayEvent.onMousedown\"\n          @mouseup=\"overlayEvent.onMouseup\"\n        >\n          <el-focus-trap\n            loop\n            :trapped=\"visible\"\n            focus-start-el=\"container\"\n            @focus-after-trapped=\"onOpenAutoFocus\"\n            @focus-after-released=\"onCloseAutoFocus\"\n            @focusout-prevented=\"onFocusoutPrevented\"\n            @release-requested=\"onCloseRequested\"\n          >\n            <el-dialog-content\n              v-if=\"rendered\"\n              ref=\"dialogContentRef\"\n              v-bind=\"$attrs\"\n              :custom-class=\"customClass\"\n              :center=\"center\"\n              :align-center=\"alignCenter\"\n              :close-icon=\"closeIcon\"\n              :draggable=\"draggable\"\n              :fullscreen=\"fullscreen\"\n              :show-close=\"showClose\"\n              :title=\"title\"\n              @close=\"handleClose\"\n            >\n              <template #header>\n                <slot\n                  v-if=\"!$slots.title\"\n                  name=\"header\"\n                  :close=\"handleClose\"\n                  :title-id=\"titleId\"\n                  :title-class=\"ns.e('title')\"\n                />\n                <slot v-else name=\"title\" />\n              </template>\n              <slot />\n              <template v-if=\"$slots.footer\" #footer>\n                <slot name=\"footer\" />\n              </template>\n            </el-dialog-content>\n          </el-focus-trap>\n        </div>\n      </el-overlay>\n    </transition>\n  </teleport>\n</template>\n\n<script lang=\"ts\" setup>\nimport { computed, provide, ref, useSlots } from 'vue'\nimport { ElOverlay } from '@element-plus/components/overlay'\nimport { useDeprecated, useNamespace, useSameTarget } from '@element-plus/hooks'\nimport ElFocusTrap from '@element-plus/components/focus-trap'\nimport ElDialogContent from './dialog-content.vue'\nimport { dialogInjectionKey } from './constants'\nimport { dialogEmits, dialogProps } from './dialog'\nimport { useDialog } from './use-dialog'\n\ndefineOptions({\n  name: 'ElDialog',\n  inheritAttrs: false,\n})\n\nconst props = defineProps(dialogProps)\ndefineEmits(dialogEmits)\nconst slots = useSlots()\n\nuseDeprecated(\n  {\n    scope: 'el-dialog',\n    from: 'the title slot',\n    replacement: 'the header slot',\n    version: '3.0.0',\n    ref: 'https://element-plus.org/en-US/component/dialog.html#slots',\n  },\n  computed(() => !!slots.title)\n)\n\nuseDeprecated(\n  {\n    scope: 'el-dialog',\n    from: 'custom-class',\n    replacement: 'class',\n    version: '2.3.0',\n    ref: 'https://element-plus.org/en-US/component/dialog.html#attributes',\n    type: 'Attribute',\n  },\n  computed(() => !!props.customClass)\n)\n\nconst ns = useNamespace('dialog')\nconst dialogRef = ref<HTMLElement>()\nconst headerRef = ref<HTMLElement>()\nconst dialogContentRef = ref()\n\nconst {\n  visible,\n  titleId,\n  bodyId,\n  style,\n  overlayDialogStyle,\n  rendered,\n  zIndex,\n  afterEnter,\n  afterLeave,\n  beforeLeave,\n  handleClose,\n  onModalClick,\n  onOpenAutoFocus,\n  onCloseAutoFocus,\n  onCloseRequested,\n  onFocusoutPrevented,\n} = useDialog(props, dialogRef)\n\nprovide(dialogInjectionKey, {\n  dialogRef,\n  headerRef,\n  bodyId,\n  ns,\n  rendered,\n  style,\n})\n\nconst overlayEvent = useSameTarget(onModalClick)\n\nconst draggable = computed(() => props.draggable && !props.fullscreen)\n\ndefineExpose({\n  /** @description whether the dialog is visible */\n  visible,\n  dialogContentRef,\n})\n</script>\n","import { withInstall } from '@element-plus/utils'\nimport Dialog from './src/dialog.vue'\n\nexport const ElDialog = withInstall(Dialog)\nexport default ElDialog\n\nexport * from './src/use-dialog'\nexport * from './src/dialog'\nexport * from './src/constants'\n"],"names":["configProviderContextKey","Symbol","globalConfig","ref","useGlobalConfig","key","defaultValue","config","getCurrentInstance","inject","computed","_a","_b","value","useSameTarget","handleClick","onClick","NOOP","onMousedown","onMouseup","mousedownTarget","mouseupTarget","e","target","currentTarget","overlayProps","buildProps","mask","type","Boolean","default","customMaskEvent","overlayClass","definePropType","String","Array","Object","zIndex","Number","overlayEmits","click","evt","MouseEvent","BLOCK","Overlay","defineComponent","name","props","emits","setup","slots","emit","ns","useNamespace","onMaskClick","createVNode","class","b","style","renderSlot","PatchFlags","h","position","top","right","bottom","left","ElOverlay","dialogInjectionKey","dialogContentProps","center","alignCenter","closeIcon","iconPropType","customClass","draggable","fullscreen","showClose","title","dialogContentEmits","close","composeRefs","refs","el","forEach","isFunction","useDraggable","targetRef","dragRef","transform","offsetX","offsetY","downX","clientX","downY","clientY","targetRect","getBoundingClientRect","targetLeft","targetTop","targetWidth","width","targetHeight","height","clientWidth","document","documentElement","clientHeight","minLeft","minTop","maxLeft","maxTop","onMousemove","e2","moveX","Math","min","max","moveY","addUnit","removeEventListener","addEventListener","onDraggable","offDraggable","onMounted","watchEffect","onBeforeUnmount","t","useLocale","Close","CloseComponents","dialogRef","headerRef","bodyId","focusTrapRef","FOCUS_TRAP_INJECTION_KEY","composedDialogRef","dialogProps","appendToBody","beforeClose","Function","destroyOnClose","closeOnClickModal","closeOnPressEscape","lockScroll","modal","openDelay","closeDelay","modelValue","modalClass","trapFocus","dialogEmits","open","opened","closed","UPDATE_MODEL_EVENT","isBoolean","openAutoFocus","closeAutoFocus","useLockscreen","trigger","options","isRef","throwError","hiddenCls","bm","isClient","hasClass","body","scrollBarWidth","withoutHiddenClass","bodyWidth","cleanup","setTimeout","removeClass","watch","val","getScrollBarWidth","namespace","bodyHasOverflow","scrollHeight","bodyOverflowY","getStyle","addClass","onScopeDispose","useDialog","instance","nextZIndex","useZIndex","lastPosition","titleId","useId","visible","rendered","openTimer","closeTimer","defaultNamespace","style2","varPrefix","overlayDialogStyle","display","afterEnter","afterLeave","beforeLeave","stop","useTimeoutFn","doOpen","doClose","handleClose","hide","shouldCancel","onModalClick","onOpenAutoFocus","onCloseAutoFocus","onFocusoutPrevented","event","detail","focusReason","preventDefault","onCloseRequested","nextTick","scrollTop","inheritAttrs","useSlots","useDeprecated","scope","from","replacement","version","dialogContentRef","provide","overlayEvent","expose","ElDialog","withInstall","Dialog"],"sourceRoot":""}